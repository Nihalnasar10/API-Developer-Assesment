import datetime as dt
from typing import List, Optional

from fastapi import FastAPI, Query
from pydantic import BaseModel, Field

app = FastAPI()


class TradeDetails(BaseModel):
    buySellIndicator: str = Field(description="A value of BUY for buys, SELL for sells.")
    price: float = Field(description="The price of the Trade.")
    quantity: int = Field(description="The amount of units traded.")


class Trade(BaseModel):
    asset_class: Optional[str] = Field(alias="assetClass", default=None,
                                      description="The asset class of the instrument traded. E.g. Bond, Equity, FX...etc")
    counterparty: Optional[str] = Field(default=None, description="The counterparty the trade was executed with. May not always be available")
    instrument_id: str = Field(alias="instrumentId", description="The ISIN/ID of the instrument traded. E.g. TSLA, AAPL, AMZN...etc")
    instrument_name: str = Field(alias="instrumentName", description="The name of the instrument traded.")
    trade_date_time: dt.datetime = Field(alias="tradeDateTime", description="The date-time the Trade was executed")
    trade_details: TradeDetails = Field(alias="tradeDetails", description="The details of the trade, i.e. price, quantity")
    trade_id: str = Field(alias="tradeId", default=None, description="The unique ID of the trade")
    trader: str = Field(description="The name of the Trader")


# Mocked database storage
trades_db = []


@app.post("/trades", response_model=Trade, status_code=201)
def create_trade(trade: Trade):
    trades_db.append(trade)
    return trade


@app.get("/trades", response_model=List[Trade])
def get_trades(
    search: Optional[str] = Query(None, description="Search text for counterparty, instrumentId, instrumentName, trader"),
    asset_class: Optional[str] = Query(None, description="Asset class of the trade"),
    start: Optional[dt.datetime] = Query(None, description="Minimum date for the tradeDateTime field"),
    end: Optional[dt.datetime] = Query(None, description="Maximum date for the tradeDateTime field"),
    min_price: Optional[float] = Query(None, description="Minimum value for the tradeDetails.price field"),
    max_price: Optional[float] = Query(None, description="Maximum value for the tradeDetails.price field"),
    trade_type: Optional[str] = Query(None, description="Trade type (BUY or SELL)")
):
    filtered_trades = trades_db

    if search:
        filtered_trades = [
            trade for trade in filtered_trades if search.lower() in str(trade).lower()
        ]

    if asset_class:
        filtered_trades = [
            trade for trade in filtered_trades if trade.asset_class == asset_class
        ]

    if start:
        filtered_trades = [
            trade for trade in filtered_trades if trade.trade_date_time >= start
        ]

    if end:
        filtered_trades = [
            trade for trade in filtered_trades if trade.trade_date_time <= end
        ]

    if min_price:
        filtered_trades = [
            trade for trade in filtered_trades if trade.trade_details.price >= min_price
        ]

    if max_price:
        filtered_trades = [
            trade for trade in filtered_trades if trade.trade_details.price <= max_price
        ]

    if trade_type:
        filtered_trades = [
            trade for trade in filtered_trades if trade.trade_details.buySellIndicator == trade_type
        ]

    return filtered_trades


@app.get("/trades/{trade_id}", response_model=Trade)
def get_trade_by_id(trade_id: str):
    trade = next((trade for trade in trades_db if trade.trade_id == trade_id), None)
    if trade is None:
        return {"message": "Trade not found"}
    return trade
